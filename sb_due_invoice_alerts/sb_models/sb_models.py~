from PIL import Image
import string
from odoo import models, fields, api, _
from odoo import tools
from datetime import datetime, date, time, timedelta
from odoo.exceptions import UserError, AccessError
from dateutil import relativedelta
from datetime import date
from datetime import datetime
import datetime
from datetime import *
# from odoo.http import request


AVAILABLE_PRIORITIES = [
    ('0', 'Very Low'),
    ('1', 'Low'),
    ('2', 'Normal'),
    ('3', 'High'),
    ('4', 'Very High')]


class res_partner(models.Model):
    _inherit="res.partner"

    complain_id = fields.Many2one('sb.sale_complain',string="Complain")
    complain_line_id = fields.Many2one('sb.complain_line',string="Complain Job")
    complain_ids = fields.One2many('sb.sale_complain','customer_id',string="Complains")

class account_invoice(models.Model):
    _inherit="account.invoice"

    complain_id = fields.Many2one('sb.sale_complain',string="Complain")


class sb_sale_contract(models.Model):
    _name = 'sb.sale_contract'
    _rec_name = 'name'

    name =  fields.Char(string='Name', required=True)


class sb_sale_complain_service(models.Model):
    _name = 'sb.sale_complain_service'
    _rec_name = 'name'


    name =  fields.Char(string='State',required="True")

class sb_sale_complain_type(models.Model):
    _name = 'sb.sale_complain_type'
    _rec_name = 'name'

    name =  fields.Char(string='Type', required=True)

    
class sb_sale_complain_state(models.Model):
    _name = 'sb.sale_complain_state'
    _rec_name = 'name'
    _order = "sequence"

    name =  fields.Char(string='state', required=True)
    sequence = fields.Integer(string='Sequence')
    is_default = fields.Boolean(string='Default')
    is_main = fields.Boolean(string="Main Complain",default=True)
    is_job = fields.Boolean(string="Job Work",default=True)

    @api.onchange('is_default')
    def onchange_is_default_field(self):
        if self.is_default:
            _status = self.env['sb.sale_complain_state'].sudo().search([('name','!=',self.name)])
            for s in _status:
                s.write({'is_default': False})


class sb_complain_line(models.Model):
    _name = 'sb.complain_line'
    _inherit="mail.thread"
    _rec_name = "product_ref"
    _description="Complain Line"
    
    @api.onchange('product_id')
    @api.depends('product_ref','product_id')
    def onchange_product_id(self):
        #if not self.product_ref and self.product_id:
        #    self.product_ref = self.product_id.name
        self.product_ref = self.product_id.name

    @api.onchange('amc_link_id')
    @api.depends('amc_link_id','sale_id')
    def onchange_amc_link_id(self):
        self.sale_id = self.amc_link_id.sale_id.id if self.amc_link_id and self.amc_link_id.sale_id else False
            
    @api.model
    def _default_status(self):
        return self.env['sb.sale_complain_state'].sudo().search([('is_default','=','True')]).id
        
    customer_id = fields.Many2one('res.partner',string = 'Customer')
    customer_address = fields.Text(string = 'Customer Address') 
    customer_mobile = fields.Char(related="customer_id.mobile",string="Customer Mobile")
    customer_phone = fields.Char(related="customer_id.phone",string="Customer Phone")
    product_id = fields.Many2one('product.product',string= 'Product')
    product_ref = fields.Char(string="Product Description", required=True)
    product_serial = fields.Char(string="Serial No.")
    sale_id = fields.Many2one('sale.order',string= 'AMC Link (SO. Ref.)')
    amc_link_id = fields.Many2one('sb.saleprodcutwarranty',string= 'AMC Ref No.')
    complain_type_id = fields.Many2one('sb.sale_complain_type',string= 'Type')
    service_id = fields.Many2one('sb.sale_complain_service',string= 'Service')
    problem = fields.Text(string="Problem")
    accessory_remark = fields.Text(string="Accessory Remark")
    internal_discussion = fields.Text(string="Internal Discussion")
    departments_id = fields.Many2one('hr.department',string= 'Assign Departments')
    assign_id = fields.Many2one('hr.employee',string= 'Assign Emp.')
    priority = fields.Selection(AVAILABLE_PRIORITIES, string='Priority', select=True, default=AVAILABLE_PRIORITIES[0][0])
    follout_date = fields.Date(string='Follout Date')
    amount = fields.Float(string='Amount')
    state = fields.Selection([('quotation','Quotation'),
                          ('diagnosis','Diagnosis'),
                          ('confirmation','Confirmation'),
                          ('repaired','Repaired'),
                          ('delivery','Delivery'),
                          ('invoiced','Invoiced'),
                          ('paid','Paid'),
                          ('done','Done'),
                          ], 'State', readonly=True, default='quotation', track_visibility='always')
    stage_id = fields.Many2one('sb.sale_complain_state',string= 'Status',default=_default_status)
    sale_complain_id = fields.Many2one('sb.sale_complain',string= 'Complain') #m2o for o2m reference in master
    current_user_id = fields.Many2one('res.users',default=lambda self: self.env.user,string="Current User")
    is_eng_assigned = fields.Boolean(string="Engineer not Assigned",default=False)
    today_date = fields.Date(string="Today's Date",default=lambda self: datetime.now())
    estimated_days = fields.Integer(string="Estimated Days")
    sb_start_job = fields.Boolean(string="Job Started")
    company_id = fields.Many2one('res.company', string="Company")
    active = fields.Boolean(string='Active', default=True)
        
    @api.onchange('customer_id')
    def onchange_customer_address(self):
        if self.customer_id:
            street = False
            street2 = False
            city = False
            state = False
            zipcode = False
            country = False
            street = self.customer_id.street if self.customer_id.street else ""
            street2 = self.customer_id.street2 if self.customer_id.street2 else ""
            city = self.customer_id.city if self.customer_id.city else ""
            state = self.customer_id.state_id.name if self.customer_id.state_id else ""
            zipcode = self.customer_id.zip if self.customer_id.zip else ""
            country = self.customer_id.country_id.name if self.customer_id.country_id else ""
            ret_address = "%s \n%s\n%s,%s,%s\n%s"%(street,street2,city,state,zipcode,country)
            
            self.customer_address = ret_address.replace(',,',',')

    @api.multi
    def write(self, vals):

        for i in self:
            tmp_status = i.stage_id.name
            result = super(sb_complain_line, i).write(vals)
            if vals.get('assign_id',False):
                if i.assign_id:
                    msg='%s is the engineer allocated for this task'%(i.assign_id.name)
                    data = [i.message_post(body=msg)]
            if vals.get('stage_id',False):
                status = self.env['sb.sale_complain_state'].sudo().search([('id','=',vals.get('stage_id',False))],limit=1).name      
                if i.internal_discussion:
                    frep_date = datetime.strptime(str(datetime.now()), "%Y-%m-%d %H:%M:%S.%f")
                    fd = frep_date.strftime('%d-%m-%Y %H:%M:%S')
                    x = datetime.strptime(fd, '%d-%m-%Y %H:%M:%S')
                    final_out = x + timedelta(hours=5,minutes=30)
                    msg='%s changed the state of the complain job from %s to %s <br/> %s added %s on %s'%(self.env.user.name,tmp_status,status,self.env.user.name,i.internal_discussion,final_out)
                    data = [i.message_post(body=msg)]
                    i.internal_discussion = False
                else:
                    msg='%s changed the state of the complain job from %s to %s'%(self.env.user.name,tmp_status,status)
                    data = [i.message_post(body=msg)]
            return result


    @api.onchange('assign_id')
    def onchange_assign_id(self):
        self.is_eng_assigned = False if self.assign_id else True


    @api.onchange('amc_link_id')
    def onchange_amc_link_id(self):
        if self.amc_link_id:
            self.sale_id = self.amc_link_id.sale_id.id
            self.product_id = self.amc_link_id.product_id.id
            self.product_ref = self.amc_link_id.product_id.name
            self.product_serial = self.amc_link_id.name



    @api.one
    def start_job(self):
        msg='%s Stated the Job'%(self.env.user.name)
        data = [self.message_post(body=msg)]
        self.sb_start_job = True

    @api.one
    def stop_job(self):
        msg='%s Stopped the Job'%(self.env.user.name)
        data = [self.message_post(body=msg)]
        self.sb_start_job = False


class sb_sale_complain(models.Model):
    _name = 'sb.sale_complain'
    _inherit="mail.thread"
    _description='Registered Complain'

    @api.model
    def _default_status(self):
        return self.env['sb.sale_complain_state'].sudo().search([('is_default','=','True')]).id


    @api.model
    def _default_user(self):
        return self.env.user.id


    name = fields.Char(string="Name", default='New', required=True, copy=False, readonly=True,)
    complain_registration =  fields.Text(string='General Remark')
    complain_date =  fields.Datetime(string='Date',default=fields.Datetime.now)
    customer_id = fields.Many2one('res.partner',string = 'Customer') 
    complain_line_ids = fields.One2many('sb.complain_line', 'sale_complain_id', 'Complain Line')
    follout_date = fields.Date(string='Follout Date')
    complain_type_id = fields.Many2one('sb.sale_complain_type',string= 'Type')
    service_id = fields.Many2one('sb.sale_complain_service',string= 'Service')
    amount = fields.Float(string='Net Amount',compute="_compute_total")
    priority = fields.Selection(AVAILABLE_PRIORITIES, string='Priority', select=True, default=AVAILABLE_PRIORITIES[0][0])
    stage_id = fields.Many2one('sb.sale_complain_state',string= 'Status',default=_default_status)
    active = fields.Boolean(string='Active', default=True)
    user_id = fields.Many2one('res.users',default=_default_user,string="Created By")
    total_invoice = fields.Integer(string="Total Invoices",compute="_total_invoices")
    invoice_total_amount = fields.Float(string="Invoices Total Amount",compute="_total_invoice_amount")
    total_paid_amount = fields.Float(string="Invoices Paid Amount",compute="_paid_invoices_amount")
    estimated_days = fields.Integer(string="Estimated Days",compute="_compute_estimated_days")
    company_id = fields.Many2one('res.company', string="Company")
    
    @api.depends('estimated_days')
    def _compute_estimated_days(self):
        for i in self:
            i.estimated_days = 0
            if i.complain_line_ids:
                for cl in i.complain_line_ids:
                    i.estimated_days += cl.estimated_days if cl.estimated_days else 0


    @api.depends('complain_line_ids')
    def _compute_total(self):
        for i in self:
            tot = 0
            for c in i.complain_line_ids:
                tot+=c.amount
            i.amount = tot


    @api.multi
    def _paid_invoices_amount(self):
        for i in self:
            i.total_paid_amount = 0
            invoices = self.env['account.invoice'].sudo().search([('partner_id','=',i.customer_id.id),('complain_id','=',i.id),('state','=','paid')])
            tot = 0
            for inv in invoices:
                tot+=inv.amount_total_signed
            i.total_paid_amount = tot


    @api.multi
    def _total_invoice_amount(self):
        for i in self:
            i.invoice_total_amount = 0
            invoices = self.env['account.invoice'].sudo().search([('partner_id','=',i.customer_id.id),('complain_id','=',i.id)])
            tot = 0
            for inv in invoices:
                tot+=inv.amount_total_signed
            i.invoice_total_amount = tot

    @api.multi
    def _total_invoices(self):
        for i in self:
            i.total_invoice = len(self.env['account.invoice'].sudo().search([('partner_id','=',i.customer_id.id),('complain_id','=',i.id)]))


    @api.model
    def create(self, vals):
        if vals.get('name','New') == 'New':
            vals['name'] = self.env['ir.sequence'].sudo().next_by_code('sb.sale_complain')
        obj = super(sb_sale_complain, self).create(vals)
        obj.user_id = self.env.user.id
        return obj

    @api.multi
    def write(self, vals):
        for i in self:
            if vals.get('stage_id',False):
                status = self.env['sb.sale_complain_state'].sudo().search([('id','=',vals.get('stage_id',False))],limit=1).name
                msg='%s changed the state of the complain to %s'%(self.env.user.name,status)
                data = [i.message_post(body=msg)]
            result = super(sb_sale_complain, i).write(vals)

        return result

"""
    @api.one
    def set_quotation(self):
        self.state = 'quotation'
    @api.one
    def set_diagnosis(self):
        self.state = 'diagnosis'
    @api.one
    def set_confirmation(self):
        self.state = 'confirmation'
    @api.one
    def set_repaired(self):
        self.state = 'repaired'
    @api.one
    def set_delivery(self):
        self.state = 'delivery'
    @api.one
    def set_invoiced(self):
        self.state = 'invoiced'
    @api.one
    def set_paid(self):
        self.state = 'paid'
    @api.one
    def set_done(self):
        self.state = 'done'        """
        





    
